# Generated by Django 3.0.4 on 2020-04-03 03:42

import core.accounts.roles.utils
import core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Role',
            fields=[
                ('role', models.CharField(choices=[('0', 'Admin'), ('1', 'default')], default='1', max_length=1, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Role',
                'verbose_name_plural': 'Roles',
                'permissions': (('leitor', 'Pode visualizar Roles'), ('editor', 'Pode visualizar e editar Roles')),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(max_length=255, unique=True, validators=[core.validators.validate_email], verbose_name='username')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, unique=True, verbose_name='email')),
                ('name', models.CharField(max_length=50, validators=[core.validators.only_char], verbose_name='Nome')),
                ('ddd_phone_comercial', models.CharField(blank=True, max_length=2, null=True, validators=[core.validators.only_numbers])),
                ('comercial_phone', models.CharField(blank=True, max_length=9, null=True, validators=[core.validators.only_numbers, core.validators.positive], verbose_name='Telefone')),
                ('ddd_phone', models.CharField(blank=True, max_length=2, null=True, validators=[core.validators.only_numbers])),
                ('phone', models.CharField(blank=True, max_length=15, null=True, validators=[core.validators.only_numbers, core.validators.positive], verbose_name='Telefone')),
                ('email_alternativo', models.EmailField(blank=True, max_length=254, null=True, verbose_name='email alterinativo')),
                ('tratamento', models.CharField(blank=True, max_length=30, null=True)),
                ('tipo_logradouro', models.CharField(blank=True, max_length=60, null=True)),
                ('logradouro', models.CharField(blank=True, max_length=80, null=True)),
                ('numero_logradouro', models.IntegerField(blank=True, null=True)),
                ('complemento', models.CharField(blank=True, max_length=80, null=True)),
                ('bairro', models.CharField(blank=True, max_length=50, null=True)),
                ('localidade', models.CharField(blank=True, max_length=80, null=True)),
                ('cidade', models.CharField(blank=True, max_length=100, null=True)),
                ('uf', models.CharField(blank=True, max_length=2, null=True)),
                ('cep', models.CharField(blank=True, max_length=8, null=True, validators=[core.validators.only_numbers])),
                ('notas', models.CharField(blank=True, max_length=100, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_admin', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('role', models.ForeignKey(default='1', on_delete=core.accounts.roles.utils.get_default_role, to='accounts.Role')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'usuario',
                'verbose_name_plural': 'usuarios',
                'default_permissions': (),
            },
        ),
    ]
